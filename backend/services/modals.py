import re
from dataclasses import dataclass

import disnake

from backend.services.responses import send_ephemeral_response


USER_REGISTER_DATA = {}


@dataclass
class UserRegistrationData:
    full_name: str
    role: disnake.Role = None


async def init_register_buttons() -> disnake.ui.ActionRow:
    register = disnake.ui.Button(
        style=disnake.ButtonStyle.primary,
        label="üìë –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å",
        custom_id="register_button",
    )
    inactive = disnake.ui.Button(
        style=disnake.ButtonStyle.grey,
        label="üë®‚Äçüéì –©–æ–± –ø—Ä–æ–π—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ",
        custom_id="inactive_button",
        disabled=True,
    )
    return disnake.ui.ActionRow(register, inactive)


async def init_name_confirm_button() -> disnake.ui.ActionRow:
    name_confirm = disnake.ui.Button(
        style=disnake.ButtonStyle.primary,
        label="‚úîÔ∏è –¢–∞–∫, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–∞–ª—ñ",
        custom_id="name_confirm_button",
    )
    return disnake.ui.ActionRow(name_confirm)


async def init_group_select(roles) -> disnake.ui.ActionRow:
    options = [
        disnake.SelectOption(
            label=role.name,
            value=str(role.id)
        ) for role in roles if not role.is_default() and "-" in role.name
    ]
    role_select = disnake.ui.Select(
        placeholder="...",
        options=options,
        custom_id="role_select_option"
    )
    return disnake.ui.ActionRow(role_select)


async def init_group_confirm_button() -> disnake.ui.ActionRow:
    group_confirm = disnake.ui.Button(
        style=disnake.ButtonStyle.green,
        label="‚úîÔ∏è –¢–∞–∫, –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
        custom_id="group_confirm_button",
    )
    return disnake.ui.ActionRow(group_confirm)


class RegisterModal(disnake.ui.Modal):
    def __init__(self, user: disnake.User) -> None:
        components = [
            disnake.ui.TextInput(
                label="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é",
                placeholder="–ö—Ä–∞–∫–æ–≤–∏—á –ü–∞–≤–ª–æ",
                custom_id="name",
                style=disnake.TextInputStyle.single_line,
                max_length=300,
            ),
        ]
        super().__init__(
            title="",
            custom_id="registerModal",
            components=components,
        )
        self.user = user

    async def callback(self, interaction: disnake.ModalInteraction) -> None:
        name = interaction.text_values["name"]
        match_patter = r"[–ê-–Ø–∞-—è–Ñ—î–Ü—ñ–á—ó“ê“ë'‚Äô\s-]+"
        if not re.fullmatch(match_patter, name) or " " not in name:
            await send_ephemeral_response(
                interaction,
                "–í–≤–µ–¥–µ–Ω—ñ –¥–∞–Ω—ñ –ø–æ–≤–∏–Ω–Ω—ñ –º—ñ—Å—Ç–∏—Ç–∏ "
                "—Ç—ñ–ª—å–∫–∏ –∫–∏—Ä–∏–ª–∏—Ü—é, –ø—Ä–æ–±—ñ–ª–∏ –∞–±–æ –∞–ø–æ—Å—Ç—Ä–æ—Ñ."
            )
            return

        USER_REGISTER_DATA[interaction.user.id] = UserRegistrationData(full_name=name)

        await send_ephemeral_response(
            interaction,
            f"–í–∏ –≤–≤–µ–ª–∏: \n"
            f"### {name} \n "
            f"–ß–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–æ–¥—É?\n"
            f"-# –í–∞—à–µ —ñ–º'—è –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–µ –Ω–∞ –≤–≤–µ–¥–µ–Ω–µ",
            components=await init_name_confirm_button()
        )
