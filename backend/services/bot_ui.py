from datetime import datetime

import disnake

from backend.config import config
from backend.utils.response import send_ephemeral_response
from backend.services.users_registration import add_registration_user, check_user_name


async def init_register_buttons() -> disnake.ui.ActionRow:
    register = disnake.ui.Button(
        style=disnake.ButtonStyle.primary,
        label="üìë –ó–∞—Ä–µ—î—Å—Ç—Ä—É–≤–∞—Ç–∏—Å—å",
        custom_id="register_button",
    )
    inactive = disnake.ui.Button(
        style=disnake.ButtonStyle.grey,
        label="üë®‚Äçüéì –©–æ–± –ø—Ä–æ–π—Ç–∏ —ñ–¥–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—é –Ω–∞ —Å–µ—Ä–≤–µ—Ä—ñ",
        custom_id="inactive_button",
        disabled=True,
    )
    return disnake.ui.ActionRow(register, inactive)


async def create_registration_embed():
    embed = disnake.Embed(
        title="–ö–∞—Ñ–µ–¥—Ä–∞ –°–∏—Å—Ç–µ–º–Ω–æ–≥–æ –ü—Ä–æ—î–∫—Ç—É–≤–∞–Ω–Ω—è –Ü–ü–°–ê",
        description=(
            "–©–æ–± –æ—Ç—Ä–∏–º–∞—Ç–∏ –¥–æ—Å—Ç—É–ø –¥–æ —Å–µ—Ä–≤–µ—Ä—É –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ –ø—Ä–æ–π—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é. "
            "–ù–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É –ø—ñ–¥ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ç–∞ –¥–æ—Ç—Ä–∏–º—É–π—Ç–µ—Å—å —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ–π\n"
            "-# –í–∏–∫–ª–∞–¥–∞—á–∞–º –¥–æ—Å—Ç–∞—Ç–Ω—å–æ –ø–µ—Ä—à–æ–≥–æ –ø—É–Ω–∫—Ç—É, –≤–∫–∞–∑–∞—Ç–∏ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è"
        ),
        color=0xFFFFFF,
    )
    embed.set_image(url="https://imgur.com/uG2M5wK.png")
    return embed


async def init_queue_buttons(leave_disabled: bool = True, switch_disabled: bool = True) -> disnake.ui.ActionRow:
    join = disnake.ui.Button(
        style=disnake.ButtonStyle.primary,
        label="üöÄ –ó–∞–ø–∏—Å–∞—Ç–∏—Å—å",
        custom_id="join_queue_button",
    )
    leave = disnake.ui.Button(
        style=disnake.ButtonStyle.grey,
        label="üëã –í–∏–π—Ç–∏",
        custom_id="leave_queue_button",
        disabled=leave_disabled,
    )
    switch_places = disnake.ui.Button(
        style=disnake.ButtonStyle.grey,
        label="üîÑ –ü–æ–º—ñ–Ω—è—Ç–∏—Å—å –º—ñ—Å—Ü—è–º–∏",
        custom_id="switch_queue_places_button",
        disabled=switch_disabled,
    )
    return disnake.ui.ActionRow(join, leave, switch_places)


async def init_staff_info_message_buttons() -> disnake.ui.ActionRow:
    open_dashboard = disnake.ui.Button(
        style=disnake.ButtonStyle.link,
        label="üíª –ü–µ—Ä–µ–π—Ç–∏ –¥–æ –≤–µ–±-–ø–∞–Ω–µ–ª—ñ",
        url=config.frontend_url
    )
    return disnake.ui.ActionRow(open_dashboard)


async def create_staff_info_message_embed():
    embed = disnake.Embed(
        title="–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è",
        description=(
            "–î–ª—è –ø–æ–ª–µ–≥—à–µ–Ω–Ω—è –∫–µ—Ä—É–≤–∞–Ω–Ω—è –Ω–∞–≤—á–∞–ª—å–Ω–∏–º –ø—Ä–æ—Ü–µ—Å–æ–º —ñ—Å–Ω—É—î –í–µ–±-–ø–∞–Ω–µ–ª—å –¥–ª—è –≤–∏–∫–ª–∞–¥–∞—á—ñ–≤.\n"
            "–Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è —â–æ–¥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø–∞–Ω–µ–ª—ñ –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —ó—ó —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ.\n"
            "–©–æ–± –≤—ñ–¥–∫—Ä–∏—Ç–∏ –ø–∞–Ω–µ–ª—ñ –≤ –±—Ä–∞—É–∑–µ—Ä—ñ - –Ω–∞—Ç–∏—Å–Ω—ñ—Ç—å –Ω–∞ –∫–Ω–æ–ø–∫—É-–ø–æ—Å–∏–ª–∞–Ω–Ω—è –ø—ñ–¥ —Ü–∏–º \n"
            "–ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è–º —Ç–∞ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—á–∏ —Å–≤—ñ–π Discord –∞–∫–∞—É–Ω—Ç."
        ),
        color=0xFFFFFF
    )
    return embed



async def create_queue_message_embed(title: str, timestamp: datetime):
    embed = disnake.Embed(
        title=title,
        color=0xFFFFFF,
        timestamp=timestamp,
    )
    embed.add_field("", "-# –ß–µ—Ä–≥–∞ –ø–æ—Ä–æ–∂–Ω—è")
    embed.set_footer(text="–ü–æ—á–∞—Ç–æ–∫")
    return embed


async def init_name_confirm_button() -> disnake.ui.ActionRow:
    name_confirm = disnake.ui.Button(
        style=disnake.ButtonStyle.primary,
        label="‚úîÔ∏è –¢–∞–∫, –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –¥–∞–ª—ñ",
        custom_id="name_confirm_button",
    )
    return disnake.ui.ActionRow(name_confirm)


async def init_switch_accept_button(disabled: bool = False):
    style = disnake.ButtonStyle.grey if disabled else disnake.ButtonStyle.green
    label = "–ó–∞–ø–∏—Ç —Å—Ö–≤–∞–ª–µ–Ω–æ" if disabled else "‚úîÔ∏è –°—Ö–≤–∞–ª–∏—Ç–∏ –∑–∞–ø–∏—Ç"

    accept = disnake.ui.Button(
        style=style,
        label=label,
        custom_id="accept_switch_button",
        disabled=disabled,
    )
    return disnake.ui.ActionRow(accept)


async def create_switch_accepted_embed(jump_url: str):
    embed = disnake.Embed(
        description=f"–í–∞—à –∑–∞–ø–∏—Ç –Ω–∞ –æ–±–º—ñ–Ω –º—ñ—Å—Ü—è–º–∏ —É —á–µ—Ä–∑—ñ {jump_url} —Å—Ö–≤–∞–ª–µ–Ω–æ",
        color=0xFFFFFF,
    )
    return embed


async def init_group_select(roles) -> disnake.ui.ActionRow:
    options = [
        disnake.SelectOption(
            label=role.name,
            value=str(role.id)
        ) for role in roles if not role.is_default() and "-" in role.name
    ]
    role_select = disnake.ui.Select(
        placeholder="...",
        options=options,
        custom_id="role_select_option"
    )
    return disnake.ui.ActionRow(role_select)


async def init_user_select(users, message_id) -> disnake.ui.ActionRow:
    options = [
        disnake.SelectOption(
            label=user.display_name,
            value=f"{user.id} {message_id}"
        ) for user in users
    ]
    user_select = disnake.ui.Select(
        placeholder="...",
        options=options,
        custom_id="user_select_option"
    )
    return disnake.ui.ActionRow(user_select)


async def init_group_confirm_button() -> disnake.ui.ActionRow:
    group_confirm = disnake.ui.Button(
        style=disnake.ButtonStyle.green,
        label="‚úîÔ∏è –¢–∞–∫, –∑–∞–≤–µ—Ä—à–∏—Ç–∏ —Ä–µ—î—Å—Ç—Ä–∞—Ü—ñ—é",
        custom_id="group_confirm_button",
    )
    return disnake.ui.ActionRow(group_confirm)


class RegisterModal(disnake.ui.Modal):
    def __init__(self, user: disnake.User) -> None:
        components = [
            disnake.ui.TextInput(
                label="–í–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ –ø—Ä—ñ–∑–≤–∏—â–µ —Ç–∞ —ñ–º'—è —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é",
                placeholder="–ö—Ä–∞–∫–æ–≤–∏—á –ü–∞–≤–ª–æ",
                custom_id="name",
                style=disnake.TextInputStyle.single_line,
                max_length=300,
            ),
        ]
        super().__init__(
            title="",
            custom_id="registerModal",
            components=components,
        )
        self.user = user

    async def callback(self, interaction: disnake.ModalInteraction) -> None:
        name = interaction.text_values["name"]
        if not await check_user_name(interaction, name):
            return

        await add_registration_user(interaction.user.id, name)

        await send_ephemeral_response(
            interaction,
            f"–í–∏ –≤–≤–µ–ª–∏: \n"
            f"### {name} \n "
            f"–ß–∏ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂—É—î—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ñ—Å—Ç—å –≤–≤–æ–¥—É?\n"
            f"-# –í–∞—à–µ —ñ–º'—è –±—É–¥–µ –∑–º—ñ–Ω–µ–Ω–æ –Ω–∞ –≤–≤–µ–¥–µ–Ω–µ",
            components=await init_name_confirm_button()
        )
